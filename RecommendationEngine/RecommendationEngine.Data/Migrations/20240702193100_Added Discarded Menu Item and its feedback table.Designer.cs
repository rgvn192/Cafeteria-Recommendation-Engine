// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecommendationEngine.Data;

#nullable disable

namespace RecommendationEngine.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240702193100_Added Discarded Menu Item and its feedback table")]
    partial class AddedDiscardedMenuItemanditsfeedbacktable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RecommendationEngine.Data.Entities.Characteristic", b =>
                {
                    b.Property<int>("CharacteristicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacteristicId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("CharacteristicId");

                    b.ToTable("Characteristics", (string)null);

                    b.HasData(
                        new
                        {
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Veg"
                        },
                        new
                        {
                            CharacteristicId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Non-Veg"
                        },
                        new
                        {
                            CharacteristicId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sweet"
                        },
                        new
                        {
                            CharacteristicId = 4,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spicy"
                        },
                        new
                        {
                            CharacteristicId = 5,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Salty"
                        },
                        new
                        {
                            CharacteristicId = 7,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gluten-Free"
                        },
                        new
                        {
                            CharacteristicId = 8,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dairy-Free"
                        },
                        new
                        {
                            CharacteristicId = 9,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nut-Free"
                        },
                        new
                        {
                            CharacteristicId = 10,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Low-Calorie"
                        },
                        new
                        {
                            CharacteristicId = 11,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "High-Protein"
                        },
                        new
                        {
                            CharacteristicId = 12,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vegan"
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DailyRolledOutMenuItem", b =>
                {
                    b.Property<int>("DailyRolledOutMenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyRolledOutMenuItemId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsShortListed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MealTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("DailyRolledOutMenuItemId");

                    b.HasIndex("MealTypeId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("DailyRolledOutMenuItems", (string)null);
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DailyRolledOutMenuItemVote", b =>
                {
                    b.Property<int>("DailyRolledOutMenuItemVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyRolledOutMenuItemVoteId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("DailyRolledOutMenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DailyRolledOutMenuItemVoteId");

                    b.HasIndex("DailyRolledOutMenuItemId");

                    b.HasIndex("UserId");

                    b.ToTable("DailyRolledOutMenuItemVotes", (string)null);
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DiscardedMenuItem", b =>
                {
                    b.Property<int>("DicardedMenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DicardedMenuItemId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("DicardedMenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("DiscardedMenuItems", (string)null);
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DiscardedMenuItemFeedback", b =>
                {
                    b.Property<int>("DiscardedMenuItemFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscardedMenuItemFeedbackId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("DiscardedMenuItemId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DiscardedMenuItemFeedbackId");

                    b.HasIndex("DiscardedMenuItemId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscardedMenuItemFeedbacks", (string)null);
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MealType", b =>
                {
                    b.Property<int>("MealTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealTypeId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("MealTypeId");

                    b.ToTable("MealTypes", (string)null);

                    b.HasData(
                        new
                        {
                            MealTypeId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Breakfast"
                        },
                        new
                        {
                            MealTypeId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lunch"
                        },
                        new
                        {
                            MealTypeId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dinner"
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuItemId"), 1L, 1);

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(70)");

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MenuItemCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UserLikeability")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("MenuItemId");

                    b.HasIndex("MenuItemCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuItems", (string)null);

                    b.HasData(
                        new
                        {
                            MenuItemId = 1,
                            AverageRating = 4.5m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 1,
                            Name = "Poha",
                            Price = 40.00m,
                            UserLikeability = 4.7m
                        },
                        new
                        {
                            MenuItemId = 2,
                            AverageRating = 4.3m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 1,
                            Name = "Upma",
                            Price = 40.00m,
                            UserLikeability = 4.6m
                        },
                        new
                        {
                            MenuItemId = 3,
                            AverageRating = 4.0m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 1,
                            Name = "Fried Idli",
                            Price = 40.00m,
                            UserLikeability = 4.2m
                        },
                        new
                        {
                            MenuItemId = 4,
                            AverageRating = 4.4m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 2,
                            Name = "Moong Daal",
                            Price = 40.00m,
                            UserLikeability = 4.5m
                        },
                        new
                        {
                            MenuItemId = 5,
                            AverageRating = 4.7m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 2,
                            Name = "Paneer lababdar",
                            Price = 40.00m,
                            UserLikeability = 4.8m
                        },
                        new
                        {
                            MenuItemId = 6,
                            AverageRating = 4.8m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 2,
                            Name = "Vegetable Biryani",
                            Price = 100.00m,
                            UserLikeability = 4.9m
                        },
                        new
                        {
                            MenuItemId = 7,
                            AverageRating = 4.5m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 2,
                            Name = "Palak Paneer",
                            Price = 90.00m,
                            UserLikeability = 4.6m
                        },
                        new
                        {
                            MenuItemId = 8,
                            AverageRating = 4.3m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 2,
                            Name = "Mix Veg",
                            Price = 90.00m,
                            UserLikeability = 4.4m
                        },
                        new
                        {
                            MenuItemId = 18,
                            AverageRating = 2.5m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 2,
                            Name = "Aloo Gobi",
                            Price = 50.00m,
                            UserLikeability = 2.7m
                        },
                        new
                        {
                            MenuItemId = 19,
                            AverageRating = 2.8m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 2,
                            Name = "Kadhi Pakoda",
                            Price = 60.00m,
                            UserLikeability = 3.0m
                        },
                        new
                        {
                            MenuItemId = 9,
                            AverageRating = 4.6m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 3,
                            Name = "Naan",
                            Price = 15.00m,
                            UserLikeability = 4.7m
                        },
                        new
                        {
                            MenuItemId = 10,
                            AverageRating = 4.4m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 3,
                            Name = "Roti",
                            Price = 10.00m,
                            UserLikeability = 4.5m
                        },
                        new
                        {
                            MenuItemId = 12,
                            AverageRating = 4.7m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 3,
                            Name = "Paratha",
                            Price = 20.00m,
                            UserLikeability = 4.8m
                        },
                        new
                        {
                            MenuItemId = 20,
                            AverageRating = 3.0m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 3,
                            Name = "Butter Naan",
                            Price = 25.00m,
                            UserLikeability = 3.2m
                        },
                        new
                        {
                            MenuItemId = 21,
                            AverageRating = 3.3m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 3,
                            Name = "Plain Paratha",
                            Price = 15.00m,
                            UserLikeability = 3.5m
                        },
                        new
                        {
                            MenuItemId = 13,
                            AverageRating = 4.8m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 4,
                            Name = "Masala Chai",
                            Price = 15.00m,
                            UserLikeability = 4.9m
                        },
                        new
                        {
                            MenuItemId = 14,
                            AverageRating = 4.6m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 4,
                            Name = "Mango Lassi",
                            Price = 25.00m,
                            UserLikeability = 4.7m
                        },
                        new
                        {
                            MenuItemId = 15,
                            AverageRating = 4.5m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 5,
                            Name = "Cucumber Raita",
                            Price = 20.00m,
                            UserLikeability = 4.6m
                        },
                        new
                        {
                            MenuItemId = 16,
                            AverageRating = 4.7m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 5,
                            Name = "Mixed Vegetable Salad",
                            Price = 30.00m,
                            UserLikeability = 4.8m
                        },
                        new
                        {
                            MenuItemId = 17,
                            AverageRating = 4.3m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 5,
                            Name = "Steamed Basmati Rice",
                            Price = 25.00m,
                            UserLikeability = 4.4m
                        },
                        new
                        {
                            MenuItemId = 22,
                            AverageRating = 3.5m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 5,
                            Name = "Plain Curd",
                            Price = 10.00m,
                            UserLikeability = 3.6m
                        },
                        new
                        {
                            MenuItemId = 23,
                            AverageRating = 3.2m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 5,
                            Name = "Green Salad",
                            Price = 20.00m,
                            UserLikeability = 3.4m
                        },
                        new
                        {
                            MenuItemId = 24,
                            AverageRating = 4.2m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 2,
                            Name = "Butter Chicken",
                            Price = 220.00m,
                            UserLikeability = 4.4m
                        },
                        new
                        {
                            MenuItemId = 25,
                            AverageRating = 4.6m,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            MenuItemCategoryId = 1,
                            Name = "Omelette",
                            Price = 100.00m,
                            UserLikeability = 4.5m
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MenuItemCategory", b =>
                {
                    b.Property<int>("MenuItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuItemCategoryId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MenuItemCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuItemCategorys", (string)null);

                    b.HasData(
                        new
                        {
                            MenuItemCategoryId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Snack"
                        },
                        new
                        {
                            MenuItemCategoryId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Main Course"
                        },
                        new
                        {
                            MenuItemCategoryId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Breads"
                        },
                        new
                        {
                            MenuItemCategoryId = 4,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beverages"
                        },
                        new
                        {
                            MenuItemCategoryId = 5,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Side Dish"
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MenuItemCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuItemCharacteristics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            CharacteristicId = 10,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 1
                        },
                        new
                        {
                            Id = 3,
                            CharacteristicId = 8,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 1
                        },
                        new
                        {
                            Id = 4,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 2
                        },
                        new
                        {
                            Id = 5,
                            CharacteristicId = 10,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 2
                        },
                        new
                        {
                            Id = 6,
                            CharacteristicId = 5,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 2
                        },
                        new
                        {
                            Id = 7,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 3
                        },
                        new
                        {
                            Id = 8,
                            CharacteristicId = 4,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 3
                        },
                        new
                        {
                            Id = 9,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 4
                        },
                        new
                        {
                            Id = 10,
                            CharacteristicId = 11,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 4
                        },
                        new
                        {
                            Id = 11,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 5
                        },
                        new
                        {
                            Id = 12,
                            CharacteristicId = 11,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 5
                        },
                        new
                        {
                            Id = 13,
                            CharacteristicId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 5
                        },
                        new
                        {
                            Id = 14,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 6
                        },
                        new
                        {
                            Id = 15,
                            CharacteristicId = 4,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 6
                        },
                        new
                        {
                            Id = 16,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 7
                        },
                        new
                        {
                            Id = 17,
                            CharacteristicId = 11,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 7
                        },
                        new
                        {
                            Id = 18,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 8
                        },
                        new
                        {
                            Id = 19,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 18
                        },
                        new
                        {
                            Id = 20,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 19
                        },
                        new
                        {
                            Id = 21,
                            CharacteristicId = 4,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 19
                        },
                        new
                        {
                            Id = 22,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 9
                        },
                        new
                        {
                            Id = 23,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 10
                        },
                        new
                        {
                            Id = 24,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 12
                        },
                        new
                        {
                            Id = 25,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 20
                        },
                        new
                        {
                            Id = 26,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 21
                        },
                        new
                        {
                            Id = 27,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 13
                        },
                        new
                        {
                            Id = 28,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 14
                        },
                        new
                        {
                            Id = 29,
                            CharacteristicId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 14
                        },
                        new
                        {
                            Id = 30,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 15
                        },
                        new
                        {
                            Id = 31,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 16
                        },
                        new
                        {
                            Id = 32,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 17
                        },
                        new
                        {
                            Id = 33,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 22
                        },
                        new
                        {
                            Id = 34,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 23
                        },
                        new
                        {
                            Id = 35,
                            CharacteristicId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 24
                        },
                        new
                        {
                            Id = 36,
                            CharacteristicId = 11,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 24
                        },
                        new
                        {
                            Id = 37,
                            CharacteristicId = 11,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 25
                        },
                        new
                        {
                            Id = 38,
                            CharacteristicId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemId = 25
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("NotificationTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("NotificationTypes", (string)null);

                    b.HasData(
                        new
                        {
                            NotificationTypeId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MenuItemVoting"
                        },
                        new
                        {
                            NotificationTypeId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FinalizeMenu"
                        },
                        new
                        {
                            NotificationTypeId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NewMenuItemAdded"
                        },
                        new
                        {
                            NotificationTypeId = 4,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MenuItemAvailabilityUpdated"
                        },
                        new
                        {
                            NotificationTypeId = 5,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DiscardMenuUpdated"
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chef"
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastSeenNotificationAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rgvn192@gmail.com",
                            IsEnabled = false,
                            LastSeenNotificationAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rgvn",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gordonramsay@gmail.com",
                            IsEnabled = false,
                            LastSeenNotificationAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gordon Ramsay",
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "amitjilovesbikaji@gmail.com",
                            IsEnabled = false,
                            LastSeenNotificationAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amitabh",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mainhoondon@gmail.com",
                            IsEnabled = false,
                            LastSeenNotificationAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Shahrukh",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bhai@gmail.com",
                            IsEnabled = false,
                            LastSeenNotificationAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Salman",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "onlyunder25@gmail.com",
                            IsEnabled = false,
                            LastSeenNotificationAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Leonardo",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.UserPreference", b =>
                {
                    b.Property<int>("UserPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPreferenceId"), 1L, 1);

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPreferenceId");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences", (string)null);

                    b.HasData(
                        new
                        {
                            UserPreferenceId = 1,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            UserPreferenceId = 2,
                            CharacteristicId = 3,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            UserPreferenceId = 3,
                            CharacteristicId = 8,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            UserPreferenceId = 4,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            UserPreferenceId = 5,
                            CharacteristicId = 11,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            UserPreferenceId = 6,
                            CharacteristicId = 10,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            UserPreferenceId = 7,
                            CharacteristicId = 2,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            UserPreferenceId = 8,
                            CharacteristicId = 11,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            UserPreferenceId = 9,
                            CharacteristicId = 1,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 6
                        },
                        new
                        {
                            UserPreferenceId = 10,
                            CharacteristicId = 4,
                            CreatedDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 6
                        });
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DailyRolledOutMenuItem", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.MealType", "MealType")
                        .WithMany("DailyRolledOutMenuItems")
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecommendationEngine.Data.Entities.MenuItem", "MenuItem")
                        .WithMany("DailyRolledOutMenuItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealType");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DailyRolledOutMenuItemVote", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.DailyRolledOutMenuItem", "DailyRolledOutMenuItem")
                        .WithMany("DailyRolledOutMenuItemVotes")
                        .HasForeignKey("DailyRolledOutMenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecommendationEngine.Data.Entities.User", "User")
                        .WithMany("DailyRolledOutMenuItemVotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyRolledOutMenuItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DiscardedMenuItem", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DiscardedMenuItemFeedback", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.DiscardedMenuItem", "DiscardedMenuItem")
                        .WithMany("DiscardedMenuItemFeedbacks")
                        .HasForeignKey("DiscardedMenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecommendationEngine.Data.Entities.User", "User")
                        .WithMany("DiscardedMenuItemFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscardedMenuItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.Feedback", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.MenuItem", "MenuItem")
                        .WithMany("Feedbacks")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecommendationEngine.Data.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.MenuItemCategory", "MenuItemCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItemCategory");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MenuItemCharacteristic", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.Characteristic", "Characteristic")
                        .WithMany("MenuItemCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecommendationEngine.Data.Entities.MenuItem", "MenuItem")
                        .WithMany("Characteristics")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.Notification", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecommendationEngine.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.User", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.UserPreference", b =>
                {
                    b.HasOne("RecommendationEngine.Data.Entities.Characteristic", "Characteristic")
                        .WithMany("UserPreferences")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecommendationEngine.Data.Entities.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.Characteristic", b =>
                {
                    b.Navigation("MenuItemCharacteristics");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DailyRolledOutMenuItem", b =>
                {
                    b.Navigation("DailyRolledOutMenuItemVotes");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.DiscardedMenuItem", b =>
                {
                    b.Navigation("DiscardedMenuItemFeedbacks");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MealType", b =>
                {
                    b.Navigation("DailyRolledOutMenuItems");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MenuItem", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("DailyRolledOutMenuItems");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.MenuItemCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RecommendationEngine.Data.Entities.User", b =>
                {
                    b.Navigation("DailyRolledOutMenuItemVotes");

                    b.Navigation("DiscardedMenuItemFeedbacks");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Preferences");
                });
#pragma warning restore 612, 618
        }
    }
}
